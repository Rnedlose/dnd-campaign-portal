generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  password          String?   // For email/password authentication
  bio               String?   @db.Text
  role              String    @default("user")
  accounts          Account[]
  sessions          Session[]
  createdCampaigns  Campaign[] @relation("CreatedCampaigns")
  campaignMemberships CampaignMember[]
  uploadedFiles     File[]
  notes             Note[]
  chatMessages      Chat[]
  theme             String?   @default("system") // "light", "dark", or "system"
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ... existing models ...

model Campaign {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation("CreatedCampaigns", fields: [createdById], references: [id])
  createdById String
  members     CampaignMember[]
  files       File[]
  notes       Note[]
  chats       Chat[]
}

model CampaignMember {
  id         String   @id @default(cuid())
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       String   @default("PLAYER") // "GM" or "PLAYER"
  joinedAt   DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([campaignId, userId])
}

model File {
  id         String   @id @default(cuid())
  name       String
  url        String   // This will now store the cloud URL
  type       String
  size       Int
  uploadedAt DateTime @default(now())
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String
  uploadedBy User     @relation(fields: [uploadedById], references: [id])
  uploadedById String
  gmOnly     Boolean  @default(false)
}

model Note {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String
  createdBy  User     @relation(fields: [createdById], references: [id])
  createdById String
  tags       String[]
  gmOnly     Boolean  @default(false)

  @@index([title])
  @@index([campaignId])
  @@index([createdById])
}

model Chat {
  id         String   @id @default(cuid())
  message    String   @db.Text
  createdAt  DateTime @default(now())
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}